print "===Mu sample start===";

do
    print " --Constant assignment";
    let phrase : "Hello World.";
    print phrase;
,,

print " --Bitwise Operators";
print 60 & 13;

print 60 ^ 13;

print 60 | 13;

print ~60;

// let phrase : "Nice to meet you."; // error cannot reassign constant
// print phrase;

print " --Mutable assignment";

let #mystery : null; // even mutables need to be initialized
print #mystery; 
#mystery := "The mystery is over"; // reassignment
print #mystery;

print " --Arithmetic";
print -5;       
print 5 - 6;
print 6 - 5;    
print 3 + 14;
print 12 * 12;
print 60 / 25;
print 5 % 4;

print " --Compound Addition";
let #test : 0;
#test += 2;
print #test; 
#test := -15;
#test += 10;
print #test;
print " --Compound Multiplication";
#test := 2;
#test *= 5;
print #test;
print " --Compound Division";
#test /= 3;
print #test;
#test := 7;
print " --Compound Modulo";
#test %= 3;
print #test;
print " --Compound Concatenation";
let #text : "one, two, three, ";
#text .= "four, ";
print #text;

print " --And, Or";
print 1 or 2;
print 1 and 2;

print " --Equality";
print 2 = 1;

print " --Not Operator";
print !(2 < 5);
print !(3 = 2 + 1);
print !(3 > 3 * 2);
print !(2 = 1);

print " --While Loop";
let #count : 1;

while #count < 100 ?
    print #count;
    #count *= 2; 
,,

print " --Until Loop";
#count := 1;

until #count > 100 ?
    print #count;
    #count *= 3;
,,

print " --If Clause";

if true ?
    print "it's true!";
,,

if (0 > -5) ?     
    print "yes, zero is greater than negative five";
,,

if 0 > 10 ?
    print "yes zero is greater than ten";
else 
    print "no, zero is not greater than ten";
,,

if false ?
    print "one";
else
    print "two";
,,

print " --Unless Clause";

let x: 5;
unless x = 4 ?
    print "good"; 
    print "good"; 
else    
    print "not good";
    print "not good";
,,

unless x = 5 ?
    print "it's not five"; 
else
    print "it is five";
,,

print " --String Concatenation";

let name: "steve";
let last: " poe";
let full_name: name .. last;
print full_name;

print " --Number Concatenation";
let appended : 1 .. 5;
print appended;

print " --functions";

let addTogether:
    use x, y return x + y;
,,
print addTogether(22, 55);

let multiplyBoth:
    use x, y return x * y;
,,
print multiplyBoth(10, 99);

let divideByTen:            // missing let on declaration has no way to disclose
    use x return x / 10;
,,
print divideByTen(39);

let isEven: 
    use x return 0 = x % 2;
,,

print isEven(3);
print isEven(58);

let fibonacci: use n as       // recursion throws off error reporting for blocks...
    if n < 2 ? return n;
    ,,
    return fibonacci(n - 2) + fibonacci(n - 1);
,,

print fibonacci(20);

print "--Global Scope";
//  ** Mutables are not in global scope **
//      let #number : 6;
//      
//      let increaseNumberByFail: use x as
//          #number := #number + x; // function doesn't know what #number is
//          print #number;
//      ,,
//      increaseNumberByFail(7); // won't work
//
//  ** Constants are in global scope **

let number : 6;
let increaseNumberBy: 
    use x return number + x;
,,

print increaseNumberBy(3);  // 9
print increaseNumberBy(2);  // 8
print increaseNumberBy(1);  // 7
print increaseNumberBy(0);  // 6
print increaseNumberBy(-1); // 5

print "functions with currying";
let defineAdd: 
    use x return use y as
        print x + y;
        return x + y;
    ,,
,,

let add5plus : defineAdd(5); 


add5plus(3);
add5plus(1);
add5plus(2);

print "when statement";

let value : 1.1;
when value:
    is = 0 ? 
        print "it's zero";
        print "what can you do?";
    ,,
    is = 1 ? 
        print "it's one";     // bug,  only does one statement
        print "that's nice.";
        print "Wouldn't you say so?";
    ,,
    is >= 1 ? 
        print "it's greater than or equal to one.";
        print "sometimes that's something as simple as two.";
    ,,
    is >= 2 ? print "it's greater than or equal to two.";
    ,,
,,

print "Count to four.";

let countTo: use x as
    let #i : 0;
    until #i >= x ?
        #i += 1;
        print #i;
    ,,
,,

countTo(4);

print " --Mutable Function Parameters";

let test : use x, #y as
    #y *= #y;
    return x + #y;
,,
print test(1, 2);

let #xyz : 15;
#xyz *= 1.2;
print #xyz;

let moduloThis: use a, z as
    return a % z;
,,

print moduloThis(19, 6);

print "===Mu sample end ===";